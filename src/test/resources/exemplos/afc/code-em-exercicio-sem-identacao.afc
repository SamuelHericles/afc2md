[chapter Relacionamento bidirecional e Lazyness]

[section Exercício: Criando um relacionamento Muitos-Para-Muitos]
[exercise]
    [question]
        Agora vamos alterar a classe %%Movimentacao%% adicionando o atributo 
        %%categorias%% do tipo %%List<Categoria>%%. Para que possamos indicar 
        que este atributo representa um relacionamento de **muitos para muitos** 
        com a classe %%Categoria%% vamos também adicionar a anotação 
        %%@ManyToMany%%.
     
[code java]
@Entity
public class Movimentacao {
    //outros atributos...
    
    @ManyToMany
    private List<Categoria> categorias = new ArrayList<Categoria>();

}
[/code]

		Não esqueça dos getters e setters do novo atributo.
    [/question]
    [question]
        Reinicie o WildFly. Após subir, o banco de dados deve ser atualizado. 
        (Caso precise, faça um ::Full Publish:: do projeto 
        %%fj25-financas-web%%) 
        
        Acesse o MySQL para verificar o resultado. As tabelas %%Categoria%% e  
        %%Movimentacao_Categoria%% devem ter sido criadas.
    [/question]
    [question]
        Antes de cadastrar as categorias associadas a cada movimentação, 
        é preciso preparar os dados para a tela. Precisamos listar  
        todas as categorias e buscar uma categoria pelo id. 
        Para isolar essa operação, vamos criar um ::DAO:: para a categoria. 
        No pacote %%br.com.caelum.financas.dao%% crie a classe 
        %%CategoriaDao%%, use a anotação %%@Stateless%% para indicar um 
        Session Bean e injete o %%EntityManager%% com a anotação 
        %%@PersistenceContext%%:
        
[code java]
package br.com.caelum.financas.dao;

@Stateless
public class CategoriaDao implements Serializable {

    @PersistenceContext
    private EntityManager manager;

    public Categoria procura(Integer id) {
        //busca pela id
    }
    
    public List<Categoria> lista() {
        //retorna todas as categorias
    }

}
[/code]        
    [/question]
[/exercise]
